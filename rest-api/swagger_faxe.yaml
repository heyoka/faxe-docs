swagger: "2.0"
info:
  title: faxe REST API
  description: API description in Markdown.
  version: 1.0.0
schemes:
  - http
  - https
basePath: /v1
host: example.com:8081
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []
paths:
  /users:
    get:
      summary: Get a list of all users.
      description: Returns a json list of all users currently known to the system.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UsersResponse'
          examples:
            application/json:
              [
                {
                  "role": "admin",
                  "pass": "pass",
                  "name": "user"
                }
              ]
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /user/add:
    post:
      summary: Add or update a User.
      description: Add or update a user record if it alread exists.
      produces:
          - application/json
      consumes:
          - application/x-www-form-urlencoded
      responses:
        200:
          description: "User was successfully added/updated"
        401:
          description: Unauthorized
        405:
          description: Method not allowed
      parameters:
        - in: "formData"
          name: "name"
          required: true
          description: "The name of the user to be added/updated"
          type: string
        - in: "formData"
          name: "pass"
          required: true
          description: "The user's password"
          type: string
  /user/delete/{username}:
    delete:
      summary: "Delete a user"
      description: "Delete a user by it's name."
      produces:
        - application/json
      responses:
        200:
          description: "User successfully deleted."
        401:
          description: Unauthorized
        404:
          description: "User with name 'username' could not be found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "username"
          type: string
          required: true
  /loglevels:
    get:
      summary: List of Loglevels
      description: Returns a list of log-levels for all configured logging backends.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/LogLevelResponse'
          examples:
            application/json:
              {
                "emit": "warning",
                "console": "info"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
  /loglevel/{backend}:
    post:
      summary: Set loglevel
      description: Given a log-backend, set a new level for logs
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
        400:
          description: "Parameter error"
          schema:
            properties:
              success:
                type: boolean
                default: false
              params_missing:
                type: array
                description: list of missing parameters
              param_invalid:
                type: string
                description: name of the invalid parameter
              possible_values:
                type: array
                description: list of possible values for invalid parameters
        401:
          description: Unauthorized
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "level"
          description: "The log level."
          type: "string"
          required: true
          enum: [debug, info, notice, warning, error, critical, alert]
        - in: "path"
          name: "backend"
          description: "Defines the log backend, possible values depend on the current configuration"
          type: string
          required: true
          enum: [console, emit, logstash]
  /config:
    get:
      summary: FAXE Configuration
      description: Returns hand-picked config settings currently active.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ConfigResponse'
          examples:
            application/json:
              {
                "metrics": {
                  "port": 1883,
                  "host": "127.0.0.1",
                  "enable": "false",
                  "base_topic": "ttgw/sys/faxe/10_10_2_15/metrics"
                },
                "debug_time_ms": 25000,
                "debug": {
                  "port": 1883,
                  "host": "127.0.0.1",
                  "enable": "false",
                  "base_topic": "ttgw/sys/faxe/10_10_2_15/debug"
                },
                "conn_status": {
                  "port": 1883,
                  "host": "127.0.0.1",
                  "enable": "true",
                  "base_topic": "ttgw/sys/faxe/10_10_2_15/conn_status"
                }
              }
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /config_all:
    get:
      summary: get complete FAXE Configuration
      description: Returns an erlang list of tuples, containing current config just like regular sys.config
      produces:
        - text/plain
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /stats/vm:
    get:
      summary: Erlang VM stats
      description: Returns statistics about the erlang VM faxe is running on.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/VmStatsResponse'
          examples:
            application/json:
              {
                "vmstats-vm_uptime": 3743605,
                "vmstats-run_queue": 1,
                "vmstats-reductions": 39523,
                "vmstats-proc_limit": 262144,
                "vmstats-proc_count": 182,
                "vmstats-port_limit": 65536,
                "vmstats-port_count": 9,
                "vmstats-modules": 1338,
                "vmstats-messages_in_queues": 0,
                "vmstats-memory.total": 86.81,
                "vmstats-memory.procs_used": 31.51,
                "vmstats-memory.ets": 2.52,
                "vmstats-memory.binary": 0.49,
                "vmstats-memory.atom_used": 1.43,
                "vmstats-io.bytes_out": 0,
                "vmstats-io.bytes_in": 0,
                "vmstats-gc.words_reclaimed": 261675,
                "vmstats-gc.count": 4,
                "vmstats-error_logger_queue_len": 0,
                "vmstats-atom_count": 44524
              }
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /stats/faxe:
    get:
      summary: FAXE stats
      description: Returns statistics the faxe application.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/FaxeStatsResponse'
          examples:
            application/json:
              {
                "running_temp_tasks": 0,
                "running_tasks": 0,
                "registered_templates": 4,
                "registered_tasks": 18,
                "permanent_tasks": 0,
                "faxe_version": "0.8.1",
                "data_throughput_sec": 11,
                "data_paths_known": 0
              }
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /tasks:
    get:
      summary: List of tasks
      description: Returns a (possibly filtered) list of all  tasks.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: query
        name: orderby
        type: string
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/running:
    get:
      summary: List of running tasks.
      description: none
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: query
        name: orderby
        type: string
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/by_template/{template_id}:
    get:
      summary: Tasks by Template
      description: Get a list of all tasks, that were created using the template with the given id
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "template_id"
        description: "Id of the template"
        required: true
        type: string
      - in: query
        name: orderby
        type: string
        default: changed
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/by_tags/{tags}:
    get:
      summary: Tasks by tags
      description: Get a list of all tasks, that have at least one of the given tags associated with them. Give a comma-separated list of tag-strings
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ArrayOfTasks'
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "tags"
        description: "comma separated list of tags"
        required: true
        type: "string"
      - in: query
        name: orderby
        type: string
        default: changed
        description: order the list of tasks by 'id', 'name', 'last_start', 'last_stop' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /tasks/start_permanent:
    get:
      summary: Start all permanent tasks
      description: Start all tasks marked permanent
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "started 4 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
  /tasks/stop_all:
    get:
      summary: Stop all tasks
      description: Stop all tasks currently running
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "stopped 4 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
  /tasks/start/{ids}:
    get:
      summary: Start tasks by their ids
      description: Start a list of tasks by their ids. Give a comma-separated list of task-ids
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "started 4 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "ids"
        description: "comma separated list of task-ids"
        required: true
        type: "string"
  /tasks/start/by_tags/{tags}:
    get:
      summary: Start tasks by their tags
      description: Start a list of tasks by tags. Give a comma-separated list of tags.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "started 4 flows"
              }
              
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "tags"
        description: "comma separated list of tags"
        required: true
        type: "string"
  /tasks/stop/{ids}:
    get:
      summary: Stop tasks by their ids
      description: Stop a list of running tasks by their ids. Give a comma-separated list of task-ids.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "stopped 1 flow"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "ids"
        description: "comma separated list of task-ids"
        required: true
        type: "string"
  /tasks/stop/by_tags/{tags}:
    get:
      summary: Stop tasks by tags.
      description: Stop a list of running tasks by their tags. Give a comma-separated list of tags.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "stopped 1 flow"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "tags"
        description: "comma separated list of tags"
        required: true
        type: "string"
  /tasks/update:
    get:
      summary: Update/reload all tasks
      description: Update all tasks, running or not, so that updates on templates and/or macros get applied to all tasks at once.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "updated 13 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
  /tasks/update_by_tags/{tags}:
    get:
      summary: Update/reload all tasks by a list of tags.
      description: Update all tasks by a list of tags, running or not, so that updates on templates and/or macros get applied to these tasks at once.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "updated 11 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "tags"
        description: "comma separated list of tags"
        required: true
        type: "string"
  /tasks/update_by_template/{template_id}:
    get:
      summary: Update/reload all tasks created with the specified template.
      description: Update all tasks by a specified template, running or not, so that updates on templates and/or macros get applied to these tasks at once.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "updated 7 flows"
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
    parameters:
      - in: "path"
        name: "template_id"
        description: "The template_id"
        required: true
        type: "string"
  /tasks/import:
    post:
      summary: "Import a list of tasks."
      description: "Import a list of json encoded task definitions. Such a list can be retrieved with the '/tasks' method for example."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed and/or imported tasks"
          schema:
            $ref: '#/definitions/ImportListResult'
        400:
          description: "Error decoding the task-list"
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        401:
          description: Unauthorized
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "tasks"
          description: "A json encoded list of tasks."
          type: "string"
          required: true
  /task:
    post:
      summary: Upsert Task
      description: Register a new or update an existing task. POST or PUT methods possible.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully registered or updated a task"
          schema:
            $ref: '#/definitions/SuccessNameIdResponse'
          examples:
            application/json:
              {
                "success": true,
                "name": "testflow",
                "id" : 17
              }
        400:
          description: "Error creating or updating the task"
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        401:
          description: Unauthorized
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "name"
          description: "Name for the new or existing task."
          type: "string"
          required: true
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the new task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: string
          required: false
  /task/{task_id}:
    get:
      summary: Get a task
      description: Get a task by its id
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path" 
          name: "task_id"
          description: "Id of the task to read"
          required: true
          type: string
  /task/start/{task_id}:
    get:
      summary: Start a task.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true
              }
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be started"
          required: true
          type: string
  /task/start/{task_id}/true:
    get:
      summary: Start a task permanently.
      description: A permanently started task will automatically be started on faxe startup.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true
              }
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be started permanently"
          required: true
          type: string
  /task/stop/{task_id}:
    get:
      summary: Stop a task.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true
              }
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be stopped"
          required: true
          type: string
  /task/stop/{task_id}/true:
    get:
      summary: Stop a task permanently.
      description: A permanently stopped task will NOT automatically be started on faxe startup anymore.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true
              }
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be stopped permanently"
          required: true
          type: string
  /task/start_group/{task_id}/{concurrency}:
    get:
      summary: Start a task-group concurrently.
      description: Starts 'concurrency' copies of the task with id 'task_id'.
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true
              }
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be started concurrently"
          required: true
          type: string
        - in: "path"
          name: "concurrency"
          description: "Number of instances, that should be started concurrently"
          required: true
          type: integer
  /task/stop_group/{groupname}:
    get:
      summary: Stop a task-group.
      description: Stop a running task-group given the groups-name (Name of the group_leader task).
      produces:
        - application/json
      responses:
        200:
          description: "OK"
        401:
          description: Unauthorized
        404:
          description: "Task could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: groupname
          description: "Name of the task-group that should be stopped."
          required: true
          type: string
  /task/delete_group/{groupname}:
    delete:
      summary: Delete a task-group.
      description: Delete a task-group given the group-name (Name of the group_leader task).
      produces:
        - application/json
      responses:
        200:
          description: "Task group deleted successfully"
        401:
          description: Unauthorized
        404:
          description: "Task-group could not be found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: groupname
          description: "Name of the task-group that should be deleted."
          required: true
          type: string
  /task/group_size/{groupname}/{group_size}:
    get:
      summary: Change the size of a task-group
      description: Change the number of copies a task-group should run. This method is to be called on a running task or task-group.
      produces:
        - application/json
      responses:
        200:
          description: "Task group size changed successfully"
        401:
          description: Unauthorized
        404:
          description: "Task-group could not be found or is not running"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: groupname
          description: "Name of the task-group."
          required: true
          type: string
        - in: path
          description: "New number of copies to run for this task-group"
          name: group_size
          type: integer
          required: true
  /dfs/validate:
    post:
      summary: "Validate a DFS script."
      description: "Provide a dfs script to validate it's syntax and contents"
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully validated dfs script"
          schema:
            $ref: '#/definitions/SuccessResponse'
          examples:
            application/json:
              {
                "success": true,
                "message": "script for flow is valid"
              }
        400:
          description: "Bad Request"
          schema:
            properties:
              success:
                type: boolean
                default: false
              params_missing:
                type: array
                items:
                  type: string
        401:
          description: "Unauthorized"
        405:
          description: "Method not allowed"
      parameters:
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
  /task/register:
    post:
      summary: "Register a task."
      description: "Provide a dfs script and a name for the new task"
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed registered task"
          schema:
            $ref: '#/definitions/SuccessNameIdResponse'
          examples:
            application/json:
              {
                "success": true,
                "name": "testflow",
                "id" : 17
              }
        400:
          description: "Error creating or parsing the task"
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        401:
          description: Unauthorized
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "name"
          description: "Name for the newly registered task."
          type: "string"
          required: true
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the new task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: string
          required: false
  /task/update/{task_id}:
    post:
      summary: "Update a task."
      description: "Provide a dfs script and a name, update can be done while a task is running."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully updated task."
          schema:
            $ref: '#/definitions/SuccessNameIdResponse'
          examples:
            application/json:
              {
                "success": true,
                "name": "testflow",
                "id" : 17
              }
        400:
          description: "Error updating the task."
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        401:
          description: Unauthorized
        404:
          description: "Task not found."
        405:
          description: "Method not allowed."
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task, that should be updated."
          required: true
          type: string
        - in: "formData"
          name: "name"
          description: "Task name"
          type: "string"
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script."
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: "string"
  /task/from_template/{template_id}/{task_name}:
    post:
      summary: "Create task from template."
      description: "Registers a new task with name 'name' from the template with id 'template_id'."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200: 
          description: "Task successfully registered."
          schema:
            $ref: '#/definitions/SuccessNameIdResponse'
          examples:
            application/json:
              {
                "success": true,
                "name": "testflow",
                "id" : 17
              }
        401:
          description: Unauthorized
        404:
          description: "Template with id 'template_id' not found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "template_id"
          type: string
          required: true
        - in: "path"
          name: "task_name"
          type: "string"
          required: true
        - in: "formData"
          name: "tags"
          description: "A list of tags for the new task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])."
          type: string
        - in: "formData"
          name: "vars"
          description: "A json object with vars for the new task, example: {\"var1\": 33}. Every definition (keyword 'def') in the template dfs can be overwritten."
          type: string
  /task/delete/{task_id}:
    delete:
      summary: "Delete a task"
      description: "Delete a task by it's id, if it is not running."
      produces:
        - application/json
      responses:
        200:
          description: "Task successfully deleted."
        401:
          description: Unauthorized
        404:
          description: "Task with id 'task_id' could not be found."
        405:
          description: "Method not allowed"
        409:
          description: Conflict. "Task is running and must be stopped before it can be deleted."
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
  /task/delete/{task_id}/force:
    delete:
      summary: "Force delete a task"
      description: "Delete a task by it's id, whether it is currently running or not."
      produces:
        - application/json
      responses:
        200:
          description: "Task successfully deleted."
        401:
          description: Unauthorized
        404:
          description: "Task with id 'task_id' could not be found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
  /task/add_tags/{task_id}:
    post:
      summary: Add tags to a task
      description: Add a list of tags to the specified task, note that a task will have a tag only once,
          it does not matter, if a task is added multiple times.
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Tags were successfully added"
        401:
          description: Unauthorized
        404:
          description: Task with id task_id were not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
        - in: "formData"
          name: "tags"
          required: true
          description: "A list of tags for the task, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])"
          type: string
  /task/remove_tags/{task_id}:
    post:
      summary: Remove tags from a task
      description: Remove a list of tags from the specified task
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Tags were successfully removed"
        401:
          description: Unauthorized
        404:
          description: Task with id task_id were not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true
        - in: "formData"
          name: "tags"
          required: true
          description: "A list of tags, provide json list([\"tag1\", \"tag_2\", \"another_tag\"])"
          type: string
  /graph/{task_id}:
    get:
      summary: Get the graph representation for a task
      description: The graph representation contains all nodes and edges, as well as some information about external connections a node may establish
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema: 
            type: string
            description: json of the graph
          
          examples:
            application/json:
              {
                "nodes": [
                  {
                    "type": "esp_debug",
                    "name": "debug6",
                    "group": 1,
                    "display_name": "debug6"
                  },
                  {
                    "type": "c_python",
                    "name": "@callback5",
                    "group": 1,
                    "display_name": "python_passthrough"
                  },
                  {
                    "type": "esp_batch",
                    "name": "batch4",
                    "group": 1,
                    "display_name": "batch4"
                  },
                  {
                    "type": "c_python",
                    "name": "@double3",
                    "group": 1,
                    "display_name": "python_double"
                  },
                  {
                    "type": "esp_default",
                    "name": "default2",
                    "group": 1,
                    "display_name": "default2"
                  },
                  {
                    "type": "esp_value_emitter",
                    "name": "value_emitter1",
                    "group": 1,
                    "display_name": "emitter"
                  }
                ],
                "edges": [
                  {
                    "src_port": 1,
                    "src": "@double3",
                    "dest_port": 1,
                    "dest": "batch4"
                  },
                  {
                    "src_port": 1,
                    "src": "@callback5",
                    "dest_port": 1,
                    "dest": "debug6"
                  },
                  {
                    "src_port": 1,
                    "src": "default2",
                    "dest_port": 1,
                    "dest": "@double3"
                  },
                  {
                    "src_port": 1,
                    "src": "batch4",
                    "dest_port": 1,
                    "dest": "@callback5"
                  },
                  {
                    "src_port": 1,
                    "src": "value_emitter1",
                    "dest_port": 1,
                    "dest": "default2"
                  }
                ]
              }
        401:
          description: Unauthorized
        404:
          description: Not found
        405:
          description: Method not allowed
      parameters:
        - in: "path"
          name: "task_id"
          type: string
          required: true

  /tags:
    get:
      summary: List of tags
      description: Get a list of all tags currently in use
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        405:
          description: Method not allowed
  /templates:
    get:
      summary: List of templates
      description: Returns a list of all templates currently registered with this faxe instance.
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    parameters:
      - in: query
        name: orderby
        type: string
        default: changed
        description: order the list of templates by 'id', 'name' or (default) 'changed'
      - in: query
        name: dir
        type: string
        default: desc
        description: direction for ordering, 'asc' or (default) 'desc'
  /templates/import:
    post:
      summary: "Import a list of templates."
      description: "Import a list of json encoded template definitions. Such a list can be retrieved with the '/templates' method for example."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed and/or imported templates"
          schema:
            $ref: '#/definitions/ImportTemplateListResult'
        400:
          description: "Error decoding the template-list"
          schema:
            properties:
              success:
                type: boolean
                default: false
              error:
                type: string
                description: error message
        401:
          description: Unauthorized
        405:
          description: "Method not allowed."
      parameters:
        - in: "formData"
          name: "templates"
          description: "A json encoded list of templates."
          type: "string"
          required: true
  /template/{template_id}:
    get:
      summary: Get a template
      description: Get a template by it's ID
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Template not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path" 
          name: "template_id"
          description: "Id of the template to read"
          required: true
          type: string
  /template/register:
    post:
      summary: "Register a template"
      description: "Provide a dfs script and a name for the new template"
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Successfully parsed and registered template"
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
      parameters:
        - in: "formData"
          name: "name"
          description: "Name for the newly registered template"
          type: "string"
        - in: "formData"
          name: "dfs"
          description: "A valid dfs script"
          type: "string"
  /import/python:
    post:
      summary: "Upload python source code files"
      description: "Upload one or more python source code files, that will be placed in the python script folder defined in faxe's config."
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      responses:
        200:
          description: "Uploaded file(s)"
          schema: 
            type: string
            description: json
          examples:
            application/json:
              {"files" :
                [ {
                  "uploaded": "filename.py",
                  "stored": "/path/to/pythonfolder/filename.py"
                },
                  {
                  "error" : "filename.py",
                  "message" :  "what went wrong"
                  }
                ]
              }
        401:
          description: Unauthorized
        405:
          description: "Method not allowed"
  /template/delete/{template_id}:
    delete:
      summary: "Delete a template"
      produces:
        - application/json
      responses:
        200:
          description: "Template successfully deleted."
        401:
          description: Unauthorized
        404:
          description: "Template with id 'task_id' could not be found."
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "template_id"
          type: string
          required: true
  /task/start_temp:
    post:
      summary: "Start a temporary task"
      description: "Start the given dfs script with a TTL, runtime can be extended with a call to /task/ping/:task_id \n when the timeout is over the task will stop and delete itself. Temporary tasks can not be restarted or updated!"
      produces:
        - 'application/json'
      consumes:
        - 'application/x-www-form-urlencoded'
      responses:
        200:
          description: "Successfully parsed the DFS script and started the task with the given ttl"
          schema:
            properties:
              id:
                type: string
                description: The task ID
              ttl:
                type: integer
                description: Time to live
              success:
                type: boolean
                default: true
        400:
          description: "An error occurred when parsing or starting the script"
          schema:
            properties:
              error:
                type: string
                description: String describing the error
              success:
                type: boolean
                default: false
        401:
          description: Unauthorized
      parameters:
        - in: "formData"
          name: "dfs"
          description: "DFS Script to run"
          type: "string"
          required: true
        - in: "formData"
          name: "ttl"
          description: "Timeout in milliseconds"
          type: "integer"
          required: true
  /task/start_debug/{task_id}:
    get:
      summary: Start debugging task with task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: path
          name: "task_id"
          required: true
          type: string
  /task/start_debug/{task_id}/{duration_minutes}:
    get:
      summary: Start debugging task with task_id for a defined amount of time
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: path
          name: "task_id"
          required: true
          type: string
        - in: path
          name: "duration_minutes"
          description: "duration in minutes the debug/log events should be published"
          required: true
          type: integer
  /task/stop_debug/{task_id}:
    get:
      summary: Stop debugging task with task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          required: true
          type: string
  /task/start_metrics_trace/{task_id}:
    get:
      summary: Start publishing node metrics for task with task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: path
          name: "task_id"
          required: true
          type: string
  /task/start_metrics_trace/{task_id}/{duration_minutes}:
    get:
      summary: Start publishing node metrics for task with task_id for a defined amount of time
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: path
          name: "task_id"
          required: true
          type: string
        - in: path
          name: "duration_minutes"
          description: "duration in minutes node metrics events will be published"
          required: true
          type: integer
  /task/stop_metrics_trace/{task_id}:
    get:
      summary: Stop publishing node metrics for task with id task_id
      produces:
        - application/json
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: "Task not found"
        405:
          description: "Method not allowed"
      parameters:
        - in: "path"
          name: "task_id"
          required: true
          type: string
  /task/ping/{task_id}:
    post:
      summary: "Extend the lifetime of a temporary task"
      responses:
        200:
          description: "Successfully extended the tasks lifetime"
          schema:
            properties:
              id:
                type: string
                description: The task ID
              ttl:
                type: integer
                description: Time to live
              success:
                type: boolean
                default: true
        400:
          description: "An error occurred. Maybe the tasks has stopped already or was not found."
          schema:
            properties:
              error:
                type: string
                description: String describing the error
              success:
                type: boolean
                default: false
        401:
          description: Unauthorized
      parameters:
        - in: "path"
          name: "task_id"
          description: "Id of the task"
          required: true
          type: string

definitions:
  started:
    type: object
    properties:
      ok:
        type: string
        description: "started"
  Task:
    type: object
    properties:
      id:
        type: integer
        description: The task ID
      name:
        type: string
        description: The task name
      dfs:
        type: string
        description: The DFS Script
      tags:
        $ref: '#/definitions/Tags'
      vars:
        $ref: '#/definitions/TemplateVars'
        description: If created by a template, contains objects of vars used when creating.
      template:
        type: string
        description: If created by template, contains the name of the template used for creation.
      running:
        type: boolean
        description: Whether the task is running at the moment.
      permanent:
        type: boolean
        description: Whether the task is to be started permanent.
      changed:
        type: string
        format: ISO8601
        description: Time the task was changed the last time.
      last_start:
        type: string
        format: ISO8601
        description: Time the task was last started.
      last_stop:
        type: string
        format: ISO8601
        description: Time the task was last stopped.
      group_leader:
        type: boolean
        description: Whether this task is group_leader.
      group:
        type: string
        description: Name of the flow-group this task belongs to.
  ArrayOfTasks:
    type: array
    items:
      $ref: '#/definitions/Task'
  TemplateVars:
    type: object
    example:
      {"template_vars": {"var1": "val1", "var2": "val2"}}
  Tags:
    type: array
    items:
      type: string
    example:
      ["tag1", "tag2", "tag3"]
  ImportListResult:
    type: object
    properties:
      total:
        type: integer
        description: The number of total tasks found in the task list.
      successful:
        type: integer
        description: The number of successfully imported tasks.
      errors:
        type: integer
        description: The number of tasks that could not be imported.
      messages:
        type: array
        items:
          $ref: '#/definitions/ImportErrorMessage'
  ImportErrorMessage:
    type: object
    example:
      { "name": "error-message" }
  ImportTemplateListResult:
    type: object
    properties:
      total:
        type: integer
        description: The number of total items found in the template list.
      successful:
        type: integer
        description: The number of successfully imported templates.
      errors:
        type: integer
        description: The number of templates that could not be imported.
      messages:
        type: array
        items:
          $ref: '#/definitions/ImportErrorMessage'
  LogEntry:
    type: object
    properties:
      severity:
          type: string
          example:
            "warning"
      meta:
        type: string
        description: a json string
        example:
          "{\"node\":\"faxe1@ubuntu\",\"pid\":\"<0.1684.0>\",\"application\":\"faxe\",\"line\":45,\"module\":\"esp_debug\",\"function\":\"do_log\"}"
      flow:
        type: string
        example: "flow_1"
      datetime:
        type: string
        format: ISO8601
        example: "2020-02-26T15:40:33.010000Z"
      comp:
        type: string
        description: the flow node
        example:
          "crate_query1"
  LogEntries:
    type: array
    items:
      $ref: '#/definitions/LogEntry'
  Logs:
    type: object
    properties:
      logs:
        $ref: '#/definitions/LogEntries'
  SuccessResponse:
    type: object
    properties:
      success:
        type: boolean
        description: true if successful, false if not
      message:
        type: string
        description: additional message field
      error:
        type: string
        description: if not successfull there can be an error message
  SuccessNameIdResponse:
    type: object
    properties:
      success:
        type: boolean
        description: true if successful, false if not
      id:
        type: string
        description: id of the flow
      name:
        type: string
        description: name of the flow
  UsersResponse:
    type: array
    items:
      $ref: '#/definitions/UserResponse'
  UserResponse:
    type: object
    properties: 
      role: 
        type: string
        description: admin
      pass: 
        type: string
        description: pass
      name: 
        type: string
        description: user
  LogLevelResponse:
    type: object
    properties: 
      emit: 
        type: string
        description: warning
      console: 
        type: string
        description: console
  
  MetricsObject:    
    type: object
    properties: 
      port: 
        type: integer
        description: '1883'
      host:
        type: string
        description: '127.0.0.1'
      enable:
        type: boolean
        description: 'false'
      base_topic:
        type: string
        description: 'ttgw/sys/faxe/10_10_2_15/metrics'
      debug_time_ms:
        type: integer
        description: '1000'
  DebugObject:    
    type: object
    properties: 
      port: 
        type: integer
        description: '1883'
      host: 
        type: string
        description: '127.0.0.1'
      enable: 
        type: boolean
        description: 'false'
      base_topic: 
        type: string
        description: 'ttgw/sys/faxe/10_10_2_15/debug'
  ConnStatusObject:    
    type: object
    properties: 
      port: 
        type: integer
        description: '1883'
      host: 
        type: string
        description: '127.0.0.1'
      enable: 
        type: boolean
        description: 'true'
      base_topic: 
        type: string
        description: 'ttgw/sys/faxe/10_10_2_15/conn_status'
  ConfigResponse:
    type: object
    properties:
      metrics:
        type: object
        $ref: '#/definitions/MetricsObject'
      debug:
        type: object
        $ref: '#/definitions/DebugObject'
      conn_status:
        type: object
        $ref: '#/definitions/ConnStatusObject'
  VmStatsResponse:
    type: object
    properties:
      vmstats-vm_uptime:
            type: string
            description: '3743605'
      vmstats-run_queue:
            type: string
            description: '1'
      vmstats-reductions:
            type: string
            description: '39523'
      vmstats-proc_limit:
            type: string
            description: '262144'
      vmstats-proc_count:
            type: string
            description: '182'
      vmstats-port_limit:
            type: string
            description: '65536'
      vmstats-port_count:
            type: string
            description: '9'
      vmstats-modules:
            type: string
            description: '1338'
      vmstats-messages_in_queues:
            type: string
            description: '0'
      vmstats-memory.total:
            type: string
            description: '86'
      vmstats-memory.procs_used:
            type: string
            description: '31'
      vmstats-memory.ets:
            type: string
            description: '2'
      vmstats-memory.binary:
            type: string
            description: '0'
      vmstats-memory.atom_used:
            type: string
            description: '1'
      vmstats-io.bytes_out:
            type: string
            description: '0'
      vmstats-io.bytes_in:
            type: string
            description: '0'
      vmstats-gc.words_reclaimed:
            type: string
            description: '261675'
      vmstats-gc.count:
            type: string
            description: '4'
      vmstats-error_logger_queue_len:
            type: string
            description: '0'
      vmstats-atom_count:
            type: string
            description: '44524'
  FaxeStatsResponse:
    type: object
    properties:
        running_temp_tasks: 
            type: string
            description: '0'
        running_tasks: 
            type: string
            description: '0'
        registered_templates: 
            type: string
            description: '4'
        registered_tasks: 
            type: string
            description: '18'
        permanent_tasks: 
            type: string
            description: '0'
        faxe_version: 
            type: string
            description: '0.8.1'
        data_throughput_sec: 
            type: string
            description: '11'
        data_paths_known: 
            type: string
            description: '0'
        